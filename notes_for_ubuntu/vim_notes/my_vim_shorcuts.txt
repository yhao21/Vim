进入到‘home’文件夹后，新建文件夹 .vim
进入到 .vim文件夹中，并使用以下命令新建文件 vim vimrc

更改键位：noremap 要使用的键位  需要顶替的键位

==============
!!!!! NOTICE: 在i3下，alt是mode，跳出括号快捷键替换为 space n!!!!
==============



1. Normal 模式下快捷键

	1.1 基本写入与编辑
		alt u			Esc
		rr			normal下 直接运行python代码
		a			光标前插入文字
		A			行首添加文字
		h			光标后后插入文字
		H			行末尾添加文字
		o			光标的下一行新建一行，并插入文字
		O (shift o)		光标的上一行新建一行，并插入文字
		P 			在normal模式下，向上插入一行
		u			撤销刚刚的编辑，相当于Ctrl Z
		Ctrl r 			恢复刚才撤销的内容
		x			删除当前光标下的字符
		dd 			剪切（删除）整行
		d			激活剪切（删除）命令
		d$ 			从当前光标删除至行尾
		y			激活复制命令
		y$			复制当前至行尾的内容
		yy			复制光标所在一整行
		nyy			复制光标下的n行
		c 			激活change修改命令。删除某一方向上的字符并进入insert模式
		c$			从当前位置删除至行尾
		p			粘贴
		cw			在光标处于单词第一个字母时，
					该命令可以删除这个单词并进入insert模式（你可以修改成自己想要的单词）
		ce			与cw相同。
		b			将光标移动到所在单词的第一个字母处。
		chw			删除光标所在单词，并进入insert模式修改。
		ch"			删除引号内所有内容
		ch(			删除括号内所有内容
		yh"			复制引号内所有内容
		yh(			复制括号内所有内容
		dh"			剪切引号内所有内容
		dh(			剪切括号内所有内容
	
		dt(			删除至(的前面。比如，apple()那么就会把apple删掉保留(
		df(			删除(到光标位置间的所有字符。这一次，删除掉的就是apple(  括号可以替换成任意的字符！
	
		f 			查找命令，配合某个字母，光标会移动到下一个该字母出现的位置。
		0 			光标会回到这一行的最开始
		cf"			删除当前位置到“间的所有内容
		df"			剪切之间的所有
		yf"			复制之间的所有
		/			搜索，相当于Ctrl F
		zz			将当前行置于屏幕中央
		+			移动至下一个搜索结果（系统默认为n）
		-			移动至上一个搜索结果（系统默认为-）
		空格 回车		取消搜索结果的高亮
		sj 			垂直分屏，光标不动
		sl			垂直分屏，光标到右侧屏幕
		si 			水平分屏，光标不动
		sk  			水平分屏，光标到下方屏幕
		空格l			光标移动到右侧屏幕
		空格j			光标移动到左侧屏幕
		空格i			光标移动到上方屏幕
		空格k			光标移动到下方屏幕
		空格o			取消分屏
		space f			增加分屏宽度
		space s			减少分屏宽度
		space e			增加上下分平时的宽度
		space d			减少上下分平时的宽度
		ti			新建标签页
		tj			切到左边页
		tl			切到右边页
		sv			从上下分屏切换至左右分屏
		sh     			从左右分屏切换至上下分屏
		ff			Nerdtree文件树打开和收起
		shift Insert 		在Ubuntu中将网页或其他非vim处复制的东西在插入或者normal模式下（insert）粘贴到vim里
		te			normal下，选中当前位置到行尾的所有内容
		ts			normal下，选中到行首
		ctrl shift v		粘贴通用剪贴板内容
	
	1.1 附录
		:r! cat <文件地址>	可以将对应文件的内容直接加载到当前打开的vim中。！！

	1.2 方向键以及光标移动

		j			光标向左
		l			光标向右
		i			光标向上
		k			光标向下
	
		J			normal模式下，移动到行首
		L			normal模式下，移动到行尾
	
		2i			向上移动两行
		3k			向下移动3行
		5l			向右移动5个光标位
		4j			向左移动4个光标位
		shift e			normal下移动到行尾
		shift b			normal下移动到行首
	
		d c y 配合数字加方向键
	
		d4i			剪切当前行上方的4行内容（当前行不会被删除）jikl方向键表示向不同方向删除
		c4i			删除当前行上方的4行。。。。
		yc4			复制当前。。。。。。
	
		Alt n			跳出括号（插入模式下）
					设置alt键为快捷键的方法：
					在插入模式下按下Ctrl v然后按 alt h，显示出来的就是你这个组合对应的代码形式。
					注意：在设置键位的时候不要把显示出来的复制过去，而是要在设置的时候通过 ctrl v alt h的方式让
					代码显示在下面一行代码中的等号后
					execute "set <M-h>=^[h"
					inoremap <M-h> <你想要的键位>
					注意，i表示insert模式，  其他的比如n对应normal模式
		alt 0			移动到上一个工作区（ubuntu系统设置中可修改）
		alt 9			移动到下一个工作区
		alt =			将当前应用移动到上一个工作区
		alt -			将当前应用移动到下一个工作区
	
		注意，原本vim中k是向上，j试向下
	
		w 			将光标切换到右侧的下一个单词开头处
		e  			将光标切换到光标所在单词的结尾处
	
		gg			将光标移动到最顶端
		Ctrl o 			将光标移回刚才的位置
		G 			将光标移动到最后一行的第一个字符
		nG			将光标移动到第n行  比如77G就是移动到第77行
		：100 回车		vim命令行中  ：数字 回车就可以直接到第n行。比nG快
		Ctrl s	 		会锁定vim不动，需要Ctrl Q解锁

		alt 0			切换到上一个工作区
		att 9			切换到下一个工作区 这两个操作要在系统设置里的快捷键中设置。




	1.3 保存与退出

		:w enter		保存修改过的文档（w: write）
		:q enter		退出该文档，回到目录界面(q: quit)
		:wq			保存并退出
	
					注意，每次保存退出都需要按：wq，太慢了，我们在vimrc中设置对应的快捷键
					vim中回车的书面形式为 <CR>
					在normal中输入 :source $MYVIMRC 回车 表示保存并重新加载这个文件，这样我们就不用保存退出vimrc再重新打开了
					这里我们将这个命令设置一个快捷键
	
		快捷键			vim执行的动作
		S			:w enter 保存
		Q			:q enter 退出
		s			<nop> for no operation.取消s的功能。原本功能为normal下删除光标位置文本并进入写入模式
		R			:source $MYVIMRC<CR>
	
		w 			将光标切换到右侧的下一个单词开头处
		e  			将光标切换到光标所在单词的结尾处
	


--------------------------------------------------------------

2. Visual 模式

	v 			按一下v相当于平时用鼠标在光标处点下。通过方向键就可以选中内容了
	shift v		 	整行选取，按下V后，移动光标完成选取光标所划过的每一行
	Ctrl v      		进入方框选择模式，通过方向键选择矩形代码内容

				注意，不论是ctrl还是shift v 按下后都可以通过 数字键 加 方向键选中对应方向的对应数量的行、列
				比如，向上全选10行，  shift v 10i

	va{			可以选中 对应括号类型 内部的所有字符。 注意我的a是系统默认的i，
	vh{			选中 包括括号在内的所有字符。  我的h是系统默认的a







Insert模式下快捷键

	Ctrl C			退回到Normal模式，与Esc功能相同
	Ctrl l			跳出括号，可以一直按住Ctrl


--------------------------------------------------------------

3. NERDTree 插件操作
	
	目录浏览：
		jikl		方向键
		o 		展开/收起光标所在文件夹目录
		x		收起当前打开的目录（只要光标在目录下就可完成）
		U		设置上级目录为根目录，比如当前打开的文档在Yan下面很多层的文件夹里，要想在目录中显示Yan为根目		录，就多按几次U
		I 		目录显示隐藏文件夹	
		ma 		光标移动到文件夹后，按ma可以插入文件或者文件夹
		md 		删除文件夹或者文件


	打开文件
		s 		垂直分屏打开目录中的文件，和pycharm中的分屏一样。这样的分屏可以让你显示不同的文件。
		h 		水平分屏打开目录中的文件，（默认为i）
		t 		以标签形式打开一个文件，注意，无法和现有文件分屏。
		T 		光标仍留在tree里，同时以标签形式打开文件

--------------------------------------------------------------

4. coc.nvim插件
	
	alt u 		向下选择并补全代码Ctrl n
	alt o		向上选择并补全代码Ctrl p
	[g		上一个语法错误地方
	]g		下一个语法错误的地方

--------------------------------------------------------------

5. utlisnips 快速插入片段插件
	
	Tab		展开选中的片段，，，，展开后再按 Tab 跳转到下一个预留位
	shift Tab	跳转到上一个预留位
	space = 	打开自定义片段文件
	space - 	打开实时编译、浏览pdf功能

6. spellchecking拼写检查

	:set spell	打开拼写检查
	:set nospell 	关闭拼写检查
	z=		光标移动到错误单词上按下 z= 就可以查看被选替换词语
	]s		移动到下一个拼写错误的地方
	[s		移动到上一个拼写错误的地方


7. 替换重复字符， 类似pycharm的 Alt J
	想要同时选中相同字符，然后把他们替换成其他字符只需要这样做：
	搜索要替换的字符串: 		/ 字符串  回车
	将光表移动到第一个要替换的字符： 	n 或者 N
	修改第一个要替换的字符： 		cgn 然后开始修改
	使用esc推出insert 模式
	使用  .  替换调下一个匹配到的字符串
	
	如果想要跳过下一个匹配到的字符  按下 n
	然后再  按 . 就会隔一个匹配的到的字符串进而进行跳过一个或多个进行修改。



=========================================
6. vim.surround

	my shortcuts(customized)
	
	ys)	bkt surround a word without space  < default: ysiw) >
	ys}	bkt surround a word without space  < defualt: ysiw} >
	yss(	bkt surround whole line  <default: yss)>	keep
	S)	after v select, bkt witout space  <default: S bkt>

	ds"(..	remove surrounds, i.e. "([	keep
	dst	remove entire pair like <dir> 	keep
	
	cs)"	change ()to ""
	
	
	改键位注意，插入模式后输入原指令，观察右下角反馈的实际键位
	remap时需要将新键位赋值给真实键位：
	例如  默认输入ysiw）即可添加bkt，
	若想用ys替代ysiw，需要nnoremap ys g@iw, 
	改键之前先使用原键位，观察右下角反馈的真实键位。


















