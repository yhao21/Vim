预先配置ultisnaps：

	在.vim路径下新建一个  UltiSnips   的文件夹，用于存放所有自定义 snips
	

命名规则：

	文件后缀为   .snippets   
	每一门语言单独创建一个 .snippets 文件即可，，可以选择用语言的名字命名。
	比如： 对latex的命名就可以是   tex.snippets    



关于新tex文件无法使用snippet：

	新文件的snippet需要自己设定，，，命令：   :UltiSnipsEdit
	如果不想设定，可以打开心文件后，第一行写好document类型然后退出，再重新打开，就可以了。


取消代码折叠，让你看到自己的数学公式：
	
	autocmd Filetype tex setlocal conceallevel=0
	autocmd Filetype plaintex setlocal conceallevel=0
	
	let g:tex_conceal = "0"

如何把tex编译成pdf
	命令行使用：pdflatex <filename.tex>


snippets书写格式
	不要随意在endsnippet的上一行留空行，他会让你的片段自带回车功能。尤其是在数学公式里面，很乱。！！！



###------Problem solving------###
If you find inline mathzone is not being detected, you need to update the math() function as the following,


global !p
texMathZones = ['texMathZone' + x for x in ['', 'X', 'XX', 'Env', 'EnvStarred', 'Ensured']]


texIgnoreMathZones = ['texMathTextArg']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]


def math():

		return vim.eval('vimtex#syntax#in_mathzone()') == '1'

endglobal


















===============
snippets args
===============

b 表示触发字符应该在一行的开始
i 表示触发字符可以在单词内（连续展示会使用这个选项）
w 表示触发字符的前后必须是一个字母分界点
r 表示触发字符可以是一个正则表达式
t 表示展开的代码片段中如果有制表符，原样输出，即使你的 vimrc 里面设置了 expandtab
m 表示删除代码片段右边的所有空白字符
e 表示自定义上下文
A 表示自动触发，不需要按 tab，类似于 VIM 中的 abbr


fn - 表示当前文件名
path - 当前文件名的路径
t - 占位符的字典，可以使用 t[1], t[2], t.v 来取占位符内容
snip - UltiSnips.TextObjects.SnippetUtil 对象的一个实例
match - 正则代码片段时返回的匹配元素（非常强大）
其中最常用的 snip 对象提供了下面一些变量：

snip.rv 表示 return value，python 代码执行后处理过的字符串赋给 rv 即可
snip.fn 表示当前文件名
snip.ft 表示当前文件类型
snip.v 表示 VISUAL 模式变量，其中 snip.v.mode 表示模式类型，snip.v.text 表示 VISUAL 模式中选择的字符



===================================================================================================
Snippets

art		create article layout

begin		setup \begin layout

doc		setup begin with document

al		align

al*		align*

center		setup \begin center

pic		includegraphics

item		itemize

qq		equation

qq*		equation*

bb		boldface text auto

uu		underline auto

bkt		big adjustable bracket auto

ee		$ $ auto

iee		$$ $$ auto

up		^{}

space =		:UltiSnipsEdit

space - 	:LLPStartPreview  start live compile and view mode for pdf.

kk		^{} automatically

dd		_{} automatically.

//		\frac automatically

ss		addup auto

pp		prod_ big Pai auto

mm		Max_  auto

ify		infinity auto

fp		frac partial auto

ll		lim auto

iig		integral auto

hh		\hat auto

tt		tilde auto

duiq		& auto

rr		+ auto

gg		- auto minus

vv		\times multiply auto
















